* README
** Introduction
Turtle is an application to help companies manage their business. It uses the MVC pattern. The frontend is written in AngularJS. The backend is written in JAVA.

This is the first project where I'm using AI IDEs like Cursor and WindSurf to assist with coding.

I will document the pros and cons of the AI tools and the process of using them.

** Features
- Employee Management
- Contract Management
- Invoice Management
- Inventory Management

** Journal
- 2024-12-01: Reconstructed the directory structure
- 2024-12-01: After using WindSurf for several days, I've discovered some issues, including:
    1. Each generated program has a different style, requiring many adjustments
    2. When AI tries to fix errors, it may introduce more problems
    3. In the process of fixing errors, original code often gets modified, leading to unexpected consequences
    4. The code is quite redundant, feeling like it just works but isn't particularly well-optimized
- 2024-12-01: I tried to maintain a template. I asked WindSurf for help, but it was creating more problems, so I had to write it myself.
- 2024-12-17: These past few days, I've been stuck on updating JPA's related tables, constantly encountering unique constraint issues that I couldn't resolve. Finally, after sending the entire error message to WindSurf, I was able to find and fix the error. Another observation from these days is that you need to guide WindSurf step by step to complete tasks - if you give it broad topics, the results are not as effective.
- 2024-12-18: Today I mainly focused on making modifications, including adjusting inappropriate relationships and modifying certain fields. These tasks are very convenient to do with WindSurf, but it requires step-by-step guidance; otherwise, many issues might arise. I wonder if there's a way for AI to remember these prompts for direct use next time, eliminating the need for repetition.
- 2024-12-23: I've been busy for a few days and haven't done much. Now I'm starting to work on some tasks. Today, I mainly modified the relationship between users and employees. I've divided users into three levels: 1. System users, who can only perform system operations and cannot conduct transactions; 2. Employees, who can complete tasks within their permission scope; 3. Guest users, primarily for non-employees to fill out information. In the future, more features may be added. Therefore, I plan to create two roles: USER_ROLE and EMPLOYEE_ROLE. USER_ROLE includes SYSTEM, EMPLOYEE, and GUEST, while EMPLOYEE_ROLE includes HR Specialist, HR Manager, Financial Accountant, Financial Cashier, Financial Manager, Administrative Specialist, and Administrative Manager.
